{"version":3,"sources":["Components/Jumbotron/Jumbotron.js","Components/ScoreSection/ScoreSection.js","Components/ClickyCard/ClickyCard.js","utils/SweetAlert.js","App.js","index.js"],"names":["Jumbotron","react_default","a","createElement","className","Component","ScoreSection","Fragment","this","props","score","topScore","ClickyCard","src","alt","name","onClick","clicked","sweetAlert","result","alertClass","alertMessage","formAlert","document","concat","innerHTML","window","swal","content","buttons","timer","App","state","clickImages","clickedIds","gameOver","shuffleCards","clickedId","array","Object","toConsumableArray","i","length","j","Math","floor","random","temp","_this","push","setState","handleClickImage","id","console","log","clickedIdLength","found","findIndex","e","setTimeout","renderClickyCards","map","clickImage","Components_ClickyCard_ClickyCard","key","image","Components_Jumbotron_Jumbotron","Components_ScoreSection_ScoreSection","ReactDOM","render","src_App","getElementById"],"mappings":"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","file":"static/js/main.e9957439.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Jumbotron.css\";\n\nclass Jumbotron extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron jumbotron-fluid jumbotron-bg\">\n                <div className=\"container text-center\">\n                    <h1 className=\"display-4 jumbotron-title-text animated infinite pulse\">CLICKY GAME</h1>\n                    <p className=\"lead jumbotron-lead-text wow animated tada\">Click on an image to earn points, but don't click on any more than once!</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import React, { Component } from \"react\";\nimport \"./ScoreSection.css\";\n\nclass ScoreSection extends Component {\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"row\">\n                    <h4 className=\"col-md-6 text-center score-section-instruction-text wow animated tada\">Click an image to begin!</h4>\n                    <h4 className=\"col-md-6 text-center score-section-showscore-text wow animated tada\">Score: {this.props.score} | Top Score: {this.props.topScore} </h4>\n                </div>\n                <hr className=\"score-divider\" />\n            </React.Fragment>\n        )\n    }\n}\n\nexport default ScoreSection;","import React, { Component } from \"react\";\nimport \"./ClickyCard.css\";\n\nclass ClickyCard extends Component {\n    render() {\n        return (\n            <div className=\"col-md-3 col-sm-4 col-6 animated infinite pulse\">\n                <img src={this.props.src} className=\"clicky-image\" alt={this.props.name} onClick={this.props.clicked}/>\n            </div>\n        )\n    }\n}\n\nexport default ClickyCard;","const sweetAlert = (result, alertClass, alertMessage) => {\n    const formAlert = document.createElement(\"p\");\n    formAlert.className += `swal-${alertClass}`;\n    formAlert.innerHTML = alertMessage;\n\n    if (result === \"gameOver\") {\n        return window.swal({\n            content: formAlert,\n            buttons: false,\n            timer: \"1000\"\n        });\n    } else if (result === \"success\") {\n        return window.swal({\n            content: formAlert,\n            buttons: false,\n        });\n    }\n}\n\nexport default sweetAlert;","import React, { Component } from 'react';\nimport Jumbotron from \"./Components/Jumbotron\";\nimport ScoreSection from \"./Components/ScoreSection\";\nimport ClickyCard from \"./Components/ClickyCard\";\nimport clickImages from \"./clickyImages.json\";\nimport sweetAlert from \"./utils/SweetAlert\";\n\nclass App extends Component {\n    state = {\n        clickImages,\n        score: 0,\n        topScore: 0,\n        clickedIds: [],\n        gameOver: false,\n    }\n\n    componentDidMount() {\n        this.shuffleCards(this.state.clickImages);\n    }\n\n    shuffleCards = (clickImages, clickedId) => {\n        const array = [...clickImages];\n        let i = array.length;\n        while (i > 0) {\n            let j = Math.floor(Math.random() * i);\n            i--;\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        if (clickedId) {\n            let clickedIds = this.state.clickedIds;\n            clickedIds.push(clickedId)\n            this.setState({\n                clickImages: array,\n                clickedIds: clickedIds\n            })\n        } else {\n            this.setState({\n                clickImages: array\n            })\n        }\n    }\n\n    handleClickImage = id => {\n        console.log(\"clicked the image No.\", id);\n        let clickedIdLength = this.state.clickedIds.length;\n        let found = this.state.clickedIds.findIndex(e => e === id);\n        if (found >= 0 && clickedIdLength < 12) {\n            sweetAlert(\"gameOver\", \"game-over-text\", \"You clicked the wrong one! Next time!\");\n            let score = this.state.clickedIds.length\n            if (score > this.state.topScore && this.state.score < 12) {\n                this.setState({\n                    score: score,\n                    topScore: score,\n                    clickedIds: [],\n                    gameOver: true\n                });\n            } else if (this.state.score < 12) {\n                this.setState({\n                    score: score,\n                    clickedIds: [],\n                    gameOver: true\n                });\n            }\n        } else if (found === -1 || clickedIdLength === 12) {\n            let score = this.state.clickedIds.length + 1\n            if (score === 12) {\n                sweetAlert(\"success\", \"success-text\", \"You are brilliant! Got all 12 correct!\")\n                this.setState({\n                    score: score,\n                    topScore: score,\n                })\n            } else if (score === 13) {\n                this.setState({\n                    clickImages,\n                    score: 1,\n                    topScore: 12,\n                    clickedIds: [],\n                    gameOver: false,\n                })\n            } else if (this.state.gameOver === false && score > this.state.topScore) {\n                this.setState({\n                    score: score,\n                    topScore: score\n                });\n            } else if (this.state.gameOver === false) {\n                this.setState({\n                    score: score\n                });\n            } else {\n                this.setState({\n                    clickImages,\n                    score: 1,\n                    clickedIds: [],\n                    gameOver: false,\n                })\n            }\n            setTimeout(() => {\n                this.shuffleCards(this.state.clickImages, id)\n            }, 100);\n        }\n    }\n\n    renderClickyCards = () => {\n        return this.state.clickImages.map(clickImage => (\n            <ClickyCard key={clickImage.id} id={clickImage.id} name={clickImage.name} src={clickImage.image} clicked={() => this.handleClickImage(clickImage.id)} />\n        ))\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Jumbotron />\n                <ScoreSection score={this.state.score} topScore={this.state.topScore} />\n                <div className=\"row justify-content-around\">\n                    {this.renderClickyCards()}\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}